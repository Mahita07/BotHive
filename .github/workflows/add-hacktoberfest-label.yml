name: Add Hacktoberfest Label

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (preview changes without applying)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      filter_labels:
        description: 'Only add to issues with these labels (comma-separated, leave empty for all)'
        required: false
        default: 'good first issue,help wanted'
        type: string

jobs:
  add-label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Add Hacktoberfest label to issues
        uses: actions/github-script@v7
        with:
          script: |
            const dryRun = '${{ github.event.inputs.dry_run }}' === 'true';
            const filterLabelsInput = '${{ github.event.inputs.filter_labels }}';
            const filterLabels = filterLabelsInput ? filterLabelsInput.split(',').map(l => l.trim()) : [];

            console.log(`üéÉ Hacktoberfest Label Workflow`);
            console.log(`Dry run: ${dryRun ? 'YES' : 'NO'}`);
            console.log(`Filter labels: ${filterLabels.length > 0 ? filterLabels.join(', ') : 'None (all issues)'}`);
            console.log('');

            // Ensure hacktoberfest label exists
            try {
              if (!dryRun) {
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'hacktoberfest',
                  color: 'FF6B35',
                  description: 'Hacktoberfest participating issue'
                });
                console.log('‚úÖ Created hacktoberfest label');
              } else {
                console.log('[DRY RUN] Would create hacktoberfest label if it doesn\'t exist');
              }
            } catch (error) {
              if (error.status === 422) {
                console.log('‚ÑπÔ∏è  Hacktoberfest label already exists');
              } else {
                throw error;
              }
            }

            // Get all open issues
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            console.log(`\nFound ${issues.length} open issues`);
            console.log('');

            let processed = 0;
            let skipped = 0;
            let added = 0;

            for (const issue of issues) {
              // Skip pull requests
              if (issue.pull_request) {
                continue;
              }

              const issueLabels = issue.labels.map(l => l.name);

              // Check if issue already has hacktoberfest label
              if (issueLabels.includes('hacktoberfest')) {
                console.log(`‚è≠Ô∏è  #${issue.number}: ${issue.title} (already has hacktoberfest label)`);
                skipped++;
                continue;
              }

              // Apply filter if specified
              if (filterLabels.length > 0) {
                const hasFilterLabel = filterLabels.some(fl => issueLabels.includes(fl));
                if (!hasFilterLabel) {
                  console.log(`‚è≠Ô∏è  #${issue.number}: ${issue.title} (doesn't match filter)`);
                  skipped++;
                  continue;
                }
              }

              // Add the label
              if (dryRun) {
                console.log(`[DRY RUN] Would add hacktoberfest label to #${issue.number}: ${issue.title}`);
              } else {
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: ['hacktoberfest']
                  });
                  console.log(`‚úÖ #${issue.number}: ${issue.title}`);
                  added++;
                } catch (error) {
                  console.error(`‚ùå Failed to add label to #${issue.number}: ${error.message}`);
                }
              }
              processed++;
            }

            // Summary
            console.log('');
            console.log('='.repeat(60));
            console.log('üìä Summary:');
            console.log(`   Processed: ${processed}`);
            console.log(`   Added: ${dryRun ? processed : added}`);
            console.log(`   Skipped: ${skipped}`);
            console.log(`   Total issues: ${issues.length}`);
            console.log('='.repeat(60));

            if (dryRun) {
              console.log('');
              console.log('üí° This was a dry run. Run with dry_run=false to apply changes.');
            }

            // Create step summary
            await core.summary
              .addHeading('Hacktoberfest Label Results')
              .addRaw(dryRun ? '‚ö†Ô∏è **Dry Run Mode** - No changes were made' : '‚úÖ **Labels Applied**')
              .addList([
                `Processed: ${processed}`,
                `Added: ${dryRun ? processed : added}`,
                `Skipped: ${skipped}`,
                `Total: ${issues.length}`
              ])
              .write();
