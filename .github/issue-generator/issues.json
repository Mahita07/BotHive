[
  {
    "title": "security(auth): move JWT secrets to environment variables",
    "labels": ["security", "good first issue"],
    "body": "## Description\n\nJWT secrets are hardcoded with fallback values in `lib/database/mongoose.ts:7-11`, exposing the authentication system to potential attacks. Anyone with repository access can see the secret and forge tokens.\n\n**Affected file**: `lib/database/mongoose.ts:7-11`\n\n```typescript\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || \"7d\";\nconst JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || \"your-refresh-secret-key\";\nconst JWT_REFRESH_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || \"30d\";\n```\n\n## Impact\n\n- Authentication system is compromised\n- Attackers can generate valid JWT tokens\n- All user sessions are at risk\n- Production deployments may use default secrets\n\n## Tasks\n\n- [ ] Remove fallback values from JWT_SECRET and JWT_REFRESH_SECRET\n- [ ] Throw errors if required environment variables are not set\n- [ ] Update `.env.example` with JWT configuration\n- [ ] Add validation at application startup\n- [ ] Update README.md with environment variable setup instructions\n\n## Acceptance Criteria\n\n- No hardcoded secrets in source code\n- Application fails gracefully with clear error if JWT_SECRET is missing\n- Documentation clearly explains required environment variables\n- No fallback values that could be used in production\n\n## Technical Details\n\nReplace with:\n```typescript\nconst JWT_SECRET = process.env.JWT_SECRET;\nconst JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET;\n\nif (!JWT_SECRET) {\n  throw new Error('JWT_SECRET environment variable is required');\n}\nif (!JWT_REFRESH_SECRET) {\n  throw new Error('JWT_REFRESH_SECRET environment variable is required');\n}\n\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || \"7d\";\nconst JWT_REFRESH_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || \"30d\";\n```\n\n**Estimated Time**: 1 hour"
  },
  {
    "title": "security(env): add missing environment variables to .env.example",
    "labels": ["security", "documentation", "good first issue"],
    "body": "## Description\n\nThe `.env.example` file is missing critical environment variables that are used throughout the codebase, making it difficult for new contributors to set up the project and potentially leading to security issues.\n\n**Affected file**: `.env.example`\n\n## Impact\n\n- New contributors cannot properly configure the application\n- Missing JWT configuration leads to using insecure defaults\n- MongoDB configuration is undocumented\n- Stripe price IDs are not documented\n\n## Tasks\n\n- [ ] Add JWT_SECRET and JWT_REFRESH_SECRET to .env.example\n- [ ] Add JWT_EXPIRES_IN and JWT_REFRESH_EXPIRES_IN with defaults\n- [ ] Add MONGODB_URI and MONGODB_DATABASE\n- [ ] Add DATABASE_PROVIDER option (supabase or mongodb)\n- [ ] Add STRIPE_BASIC_PRICE_ID, STRIPE_PRO_PRICE_ID, STRIPE_ENTERPRISE_PRICE_ID\n- [ ] Add comments explaining each variable's purpose\n- [ ] Add example values where appropriate\n\n## Acceptance Criteria\n\n- All environment variables used in code are documented\n- Each variable has a comment explaining its purpose\n- Sensitive variables show placeholder format (not real values)\n- Optional variables are clearly marked\n\n## Technical Details\n\nAdd to `.env.example`:\n```bash\n# Database Provider (supabase or mongodb)\nDATABASE_PROVIDER=supabase\n\n# MongoDB (if using mongodb provider)\nMONGODB_URI=mongodb://localhost:27017\nMONGODB_DATABASE=bothive\n\n# JWT Configuration\nJWT_SECRET=your-very-long-random-secret-key-here\nJWT_REFRESH_SECRET=your-very-long-random-refresh-secret-key-here\nJWT_EXPIRES_IN=7d\nJWT_REFRESH_EXPIRES_IN=30d\n\n# Stripe Price IDs\nSTRIPE_BASIC_PRICE_ID=price_xxx\nSTRIPE_PRO_PRICE_ID=price_xxx\nSTRIPE_ENTERPRISE_PRICE_ID=price_xxx\n```\n\n**Estimated Time**: 30 minutes"
  },
  {
    "title": "test(setup): add Jest testing infrastructure",
    "labels": ["test", "enhancement", "help wanted"],
    "body": "## Description\n\nThe project currently has no testing infrastructure. Adding Jest with TypeScript support will enable contributors to write and run tests for the codebase.\n\n**Current State**: No test files or test configuration exists\n\n## Impact\n\n- No automated testing for new features\n- Difficult to catch regressions\n- Lower code quality and confidence in deployments\n- Contributors cannot add tests for their contributions\n\n## Tasks\n\n- [ ] Install Jest and required dependencies (@types/jest, ts-jest, @testing-library/react, @testing-library/jest-dom)\n- [ ] Create `jest.config.js` with TypeScript and Next.js support\n- [ ] Create `jest.setup.js` for test environment configuration\n- [ ] Add test scripts to package.json (test, test:watch, test:coverage)\n- [ ] Create example test file for utility functions\n- [ ] Update .gitignore to exclude coverage directory\n- [ ] Document testing approach in CONTRIBUTING.md\n\n## Acceptance Criteria\n\n- `npm test` runs Jest successfully\n- TypeScript tests work without type errors\n- React Testing Library is configured for component tests\n- Coverage reports are generated\n- Example tests demonstrate best practices\n\n## Technical Details\n\nInstall dependencies:\n```bash\nnpm install -D jest @types/jest ts-jest @testing-library/react @testing-library/jest-dom @testing-library/user-event jest-environment-jsdom\n```\n\nCreate `jest.config.js`:\n```javascript\nconst nextJest = require('next/jest')\n\nconst createJestConfig = nextJest({\n  dir: './',\n})\n\nconst customJestConfig = {\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n  testEnvironment: 'jest-environment-jsdom',\n  moduleNameMapper: {\n    '^@/(.*)$': '<rootDir>/$1',\n  },\n  collectCoverageFrom: [\n    'app/**/*.{js,jsx,ts,tsx}',\n    'lib/**/*.{js,jsx,ts,tsx}',\n    'components/**/*.{js,jsx,ts,tsx}',\n    '!**/*.d.ts',\n    '!**/node_modules/**',\n  ],\n}\n\nmodule.exports = createJestConfig(customJestConfig)\n```\n\n**Estimated Time**: 2-3 hours"
  },
  {
    "title": "test(auth): add unit tests for authentication functions",
    "labels": ["test", "enhancement", "help wanted"],
    "body": "## Description\n\nThe authentication module in `lib/database/mongoose.ts` has no test coverage. Unit tests are needed for JWT generation, token verification, and password hashing functions.\n\n**Affected file**: `lib/database/mongoose.ts`\n\n## Impact\n\n- Security-critical code is untested\n- Potential bugs in authentication could go unnoticed\n- Difficult to refactor with confidence\n\n## Prerequisites\n\n- Complete issue: \"test(setup): add Jest testing infrastructure\"\n\n## Tasks\n\n- [ ] Create `lib/database/__tests__/mongoose.test.ts`\n- [ ] Test JWT token generation (generateAuthToken method)\n- [ ] Test refresh token generation (generateRefreshToken method)\n- [ ] Test token verification (verifyToken function)\n- [ ] Test refresh token verification (verifyRefreshToken function)\n- [ ] Test password comparison (comparePassword method)\n- [ ] Test password hashing (pre-save hook)\n- [ ] Test role checking (checkRole function)\n- [ ] Mock environment variables in tests\n\n## Acceptance Criteria\n\n- All authentication functions have test coverage\n- Tests cover both success and failure cases\n- Token expiration is tested\n- Invalid tokens are properly rejected\n- Password hashing works correctly\n- Test coverage for auth module is >80%\n\n## Technical Details\n\nExample test structure:\n```typescript\nimport { verifyToken, verifyRefreshToken } from '../mongoose';\nimport jwt from 'jsonwebtoken';\n\ndescribe('JWT Authentication', () => {\n  describe('verifyToken', () => {\n    it('should verify valid token', () => {\n      // test implementation\n    });\n    \n    it('should reject expired token', () => {\n      // test implementation\n    });\n    \n    it('should reject invalid strategy', () => {\n      // test implementation\n    });\n  });\n});\n```\n\n**Estimated Time**: 3-4 hours"
  },
  {
    "title": "refactor(types): replace 'any' types with proper TypeScript types",
    "labels": ["refactor", "code quality", "help wanted"],
    "body": "## Description\n\nMultiple files use `any` type, which defeats the purpose of TypeScript's type safety. These should be replaced with proper type definitions.\n\n**Affected files**:\n- `lib/database/client.ts`\n- `lib/database/mongodb.ts`\n- `lib/database/supabase.ts`\n- `lib/auth.ts`\n- `lib/types.ts`\n- `app/init/page.tsx`\n- `app/data/page.tsx`\n- `app/sign-up/page.tsx`\n- `app/sign-in/page.tsx`\n- `lib/supabase/server.ts`\n- `app/dashboard/layout.tsx`\n\n## Impact\n\n- Loss of type safety benefits\n- Potential runtime errors\n- Poor IDE autocomplete support\n- Harder to catch bugs during development\n\n## Tasks\n\n- [ ] Audit all files with `any` types\n- [ ] Create proper type definitions for database operations\n- [ ] Define types for API responses\n- [ ] Define types for component props\n- [ ] Define types for error handling\n- [ ] Update catch blocks to use `unknown` instead of `any`\n- [ ] Enable strict TypeScript checks in tsconfig.json\n\n## Acceptance Criteria\n\n- No `any` types except where absolutely necessary (with justification)\n- All function parameters have proper types\n- All return types are explicitly defined\n- ESLint no-explicit-any rule passes\n- Build completes without type warnings\n\n## Technical Details\n\nReplace patterns like:\n```typescript\n// Bad\ncatch (error: any) {\n  console.error(error.message);\n}\n\n// Good\ncatch (error: unknown) {\n  const message = error instanceof Error ? error.message : 'Unknown error';\n  console.error(message);\n}\n```\n\n**Estimated Time**: 4-6 hours"
  },
  {
    "title": "fix(logging): replace console.log with proper logging library",
    "labels": ["enhancement", "code quality", "good first issue"],
    "body": "## Description\n\nThe codebase uses `console.log`, `console.error`, and `console.warn` throughout, which is not suitable for production. A proper logging library should be used.\n\n**Affected files**: 15+ files in `app/` directory\n\n## Impact\n\n- No structured logging for debugging\n- Console logs appear in production\n- Cannot control log levels by environment\n- Difficult to aggregate logs in production\n\n## Tasks\n\n- [ ] Choose and install a logging library (winston, pino, or consola recommended)\n- [ ] Create logging utility in `lib/logger.ts`\n- [ ] Configure log levels by environment (dev, staging, prod)\n- [ ] Replace all console.log with logger.info\n- [ ] Replace all console.error with logger.error\n- [ ] Replace all console.warn with logger.warn\n- [ ] Add structured logging for API routes\n- [ ] Document logging conventions in CONTRIBUTING.md\n\n## Acceptance Criteria\n\n- No console.* calls in production code (except in Next.js config)\n- Logging library is properly configured\n- Log levels work correctly in different environments\n- Logs include contextual information (timestamps, request IDs)\n- Error logs include stack traces\n\n## Technical Details\n\nExample using pino:\n```typescript\n// lib/logger.ts\nimport pino from 'pino';\n\nexport const logger = pino({\n  level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',\n  transport: process.env.NODE_ENV !== 'production' ? {\n    target: 'pino-pretty'\n  } : undefined,\n});\n\n// Usage\nlogger.info({ userId: user.id }, 'User signed in');\nlogger.error({ err }, 'Database connection failed');\n```\n\n**Estimated Time**: 2-3 hours"
  },
  {
    "title": "fix(webhooks): add error logging for Stripe webhook failures",
    "labels": ["bug", "enhancement", "good first issue"],
    "body": "## Description\n\nThe Stripe webhook handler in `app/api/webhooks/stripe/route.ts:60-61` catches errors but only logs them to console without proper error details or alerting.\n\n**Affected file**: `app/api/webhooks/stripe/route.ts:60-66`\n\n```typescript\ncatch (error) {\n  console.log(error); // Insufficient error handling\n  return NextResponse.json(\n    { message: 'Webhook handler failed' },\n    { status: 500 }\n  );\n}\n```\n\n## Impact\n\n- Subscription creation/updates may fail silently\n- Lost revenue if payments are not processed\n- Difficult to debug webhook issues\n- No alerting on critical failures\n\n## Tasks\n\n- [ ] Add detailed error logging with event type and ID\n- [ ] Log the full error object with stack trace\n- [ ] Add monitoring/alerting for webhook failures (Sentry or similar)\n- [ ] Include user/customer context in error logs\n- [ ] Add retry logic for transient failures\n- [ ] Document webhook debugging process\n\n## Acceptance Criteria\n\n- Error logs include event type, event ID, and customer ID\n- Stack traces are captured and logged\n- Critical webhook failures trigger alerts\n- Error messages are descriptive for debugging\n- Webhook failures are tracked in monitoring dashboard\n\n## Technical Details\n\n```typescript\ncatch (error) {\n  const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n  const errorStack = error instanceof Error ? error.stack : undefined;\n  \n  logger.error({\n    error: errorMessage,\n    stack: errorStack,\n    eventType: event.type,\n    eventId: event.id,\n    customerId: subscription.customer\n  }, 'Stripe webhook handler failed');\n  \n  // Send to error tracking service\n  if (process.env.NODE_ENV === 'production') {\n    captureException(error);\n  }\n  \n  return NextResponse.json(\n    { message: 'Webhook handler failed' },\n    { status: 500 }\n  );\n}\n```\n\n**Estimated Time**: 1-2 hours"
  },
  {
    "title": "fix(webhooks): add database error handling for subscription upsert",
    "labels": ["bug", "enhancement", "good first issue"],
    "body": "## Description\n\nThe Stripe webhook's subscription upsert operation in `app/api/webhooks/stripe/route.ts:41-53` does not check for database errors, potentially leading to data inconsistencies.\n\n**Affected file**: `app/api/webhooks/stripe/route.ts:41-53`\n\n## Impact\n\n- Subscription updates may fail silently\n- User subscription status could be incorrect\n- Payment received but subscription not activated\n- No way to detect database failures\n\n## Tasks\n\n- [ ] Check result of supabase.from('subscriptions').upsert() for errors\n- [ ] Log database errors with full context\n- [ ] Add retry logic for database failures\n- [ ] Validate subscription data before insert\n- [ ] Add missing user_id field to upsert (currently not included)\n- [ ] Test webhook with various failure scenarios\n\n## Acceptance Criteria\n\n- Database errors are caught and logged\n- Webhook returns appropriate error status on database failure\n- All required fields are included in upsert\n- Retries are attempted for transient failures\n- Test coverage for error scenarios\n\n## Technical Details\n\n```typescript\nconst { data, error: dbError } = await supabase\n  .from('subscriptions')\n  .upsert({\n    stripe_subscription_id: subscription.id,\n    user_id: /* Need to look up from stripe_customer_id */,\n    status: subscription.status,\n    tier: subscription.metadata.tier,\n    current_period_end: new Date(subscription.current_period_end * 1000),\n    cancel_at_period_end: subscription.cancel_at_period_end,\n    stripe_customer_id: subscription.customer as string,\n    trial_end: subscription.trial_end\n      ? new Date(subscription.trial_end * 1000)\n      : null,\n  });\n\nif (dbError) {\n  logger.error({ error: dbError, subscriptionId: subscription.id }, 'Failed to upsert subscription');\n  throw dbError;\n}\n```\n\n**Estimated Time**: 2 hours"
  },
  {
    "title": "feat(api): add rate limiting to API routes",
    "labels": ["enhancement", "security", "help wanted"],
    "body": "## Description\n\nAPI routes have no rate limiting, making the application vulnerable to abuse and DDoS attacks.\n\n**Affected files**: All routes in `app/api/`\n\n## Impact\n\n- Vulnerable to brute force attacks on authentication endpoints\n- Potential for resource exhaustion\n- No protection against API abuse\n- Increased server costs from malicious traffic\n\n## Tasks\n\n- [ ] Install rate limiting library (upstash/ratelimit or express-rate-limit)\n- [ ] Create rate limiting middleware in `lib/middleware/rate-limit.ts`\n- [ ] Apply strict limits to auth endpoints (signin, signup, refresh)\n- [ ] Apply moderate limits to mutation endpoints\n- [ ] Apply lenient limits to read-only endpoints\n- [ ] Return proper HTTP 429 status with Retry-After header\n- [ ] Add rate limit bypass for authenticated admin users\n- [ ] Document rate limits in API documentation\n\n## Acceptance Criteria\n\n- Auth endpoints limited to 5 requests per minute per IP\n- Mutation endpoints limited to 30 requests per minute\n- Read endpoints limited to 100 requests per minute\n- Rate limit headers included in responses\n- Proper error messages for rate limited requests\n- Rate limits are configurable via environment variables\n\n## Technical Details\n\nUsing Upstash (works well with Vercel):\n```typescript\nimport { Ratelimit } from '@upstash/ratelimit';\nimport { Redis } from '@upstash/redis';\n\nconst redis = new Redis({\n  url: process.env.UPSTASH_REDIS_REST_URL!,\n  token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n});\n\nexport const authRateLimit = new Ratelimit({\n  redis,\n  limiter: Ratelimit.slidingWindow(5, '1 m'),\n  analytics: true,\n});\n\n// Usage in route\nconst identifier = request.headers.get('x-forwarded-for') ?? 'anonymous';\nconst { success, limit, remaining, reset } = await authRateLimit.limit(identifier);\n\nif (!success) {\n  return new Response('Rate limit exceeded', {\n    status: 429,\n    headers: {\n      'X-RateLimit-Limit': limit.toString(),\n      'X-RateLimit-Remaining': remaining.toString(),\n      'X-RateLimit-Reset': reset.toString(),\n    },\n  });\n}\n```\n\n**Estimated Time**: 3-4 hours"
  },
  {
    "title": "feat(api): add input validation to API routes",
    "labels": ["enhancement", "security", "help wanted"],
    "body": "## Description\n\nAPI routes lack input validation, making them vulnerable to injection attacks and data corruption. Zod is already installed but not used for API validation.\n\n**Affected files**: All routes in `app/api/auth/` and `app/api/agents/`\n\n## Impact\n\n- SQL/NoSQL injection vulnerabilities\n- XSS vulnerabilities through stored data\n- Invalid data in database\n- Poor error messages for invalid input\n\n## Tasks\n\n- [ ] Create Zod schemas for all API request bodies\n- [ ] Create validation middleware using Zod\n- [ ] Add validation to signup endpoint (email, password, name, role)\n- [ ] Add validation to signin endpoint (email, password)\n- [ ] Add validation to agent creation endpoint\n- [ ] Add validation to profile update endpoints\n- [ ] Return 400 with detailed validation errors\n- [ ] Sanitize string inputs to prevent XSS\n\n## Acceptance Criteria\n\n- All POST/PUT/PATCH routes validate input\n- Invalid requests return 400 with specific error messages\n- Zod schemas are reusable across client and server\n- Email validation uses proper regex\n- Password meets strength requirements (min 8 chars, complexity)\n- SQL/NoSQL injection attempts are blocked\n\n## Technical Details\n\nCreate `lib/validations/auth.ts`:\n```typescript\nimport { z } from 'zod';\n\nexport const signupSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  password: z.string()\n    .min(8, 'Password must be at least 8 characters')\n    .regex(/[A-Z]/, 'Password must contain uppercase letter')\n    .regex(/[a-z]/, 'Password must contain lowercase letter')\n    .regex(/[0-9]/, 'Password must contain number'),\n  full_name: z.string()\n    .min(2, 'Name must be at least 2 characters')\n    .max(100, 'Name must be less than 100 characters')\n    .trim(),\n  role: z.enum(['builder', 'recruiter']),\n});\n\n// Usage in route\ntry {\n  const body = await req.json();\n  const validated = signupSchema.parse(body);\n  // Use validated data\n} catch (error) {\n  if (error instanceof z.ZodError) {\n    return NextResponse.json(\n      { errors: error.errors },\n      { status: 400 }\n    );\n  }\n}\n```\n\n**Estimated Time**: 4-5 hours"
  },
  {
    "title": "ci(github-actions): add automated testing workflow",
    "labels": ["ci", "enhancement", "good first issue"],
    "body": "## Description\n\nThe repository has no CI/CD pipeline for automated testing. A GitHub Actions workflow is needed to run tests on every pull request and push.\n\n**Current State**: No `.github/workflows/` directory exists\n\n## Impact\n\n- No automated quality checks before merge\n- Potential for broken code to reach main branch\n- Manual testing burden on maintainers\n- Contributors don't know if their changes pass tests\n\n## Prerequisites\n\n- Complete issue: \"test(setup): add Jest testing infrastructure\"\n\n## Tasks\n\n- [ ] Create `.github/workflows/test.yml`\n- [ ] Configure Node.js setup with correct version\n- [ ] Add step to install dependencies\n- [ ] Add step to run linting (ESLint)\n- [ ] Add step to run type checking (tsc --noEmit)\n- [ ] Add step to run tests with coverage\n- [ ] Upload coverage to codecov or similar\n- [ ] Add status badge to README.md\n- [ ] Configure branch protection to require passing tests\n\n## Acceptance Criteria\n\n- Tests run automatically on every PR and push\n- Failed tests block PR merge (if branch protection enabled)\n- Coverage reports are generated and visible\n- Workflow completes in under 5 minutes\n- README shows build status badge\n\n## Technical Details\n\nCreate `.github/workflows/test.yml`:\n```yaml\nname: Test\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        node-version: [18.x, 20.x]\n    \n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Setup Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Run linting\n        run: npm run lint\n      \n      - name: Run type checking\n        run: npx tsc --noEmit\n      \n      - name: Run tests\n        run: npm test -- --coverage\n      \n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n        with:\n          files: ./coverage/lcov.info\n```\n\n**Estimated Time**: 1-2 hours"
  },
  {
    "title": "ci(github-actions): add automated build workflow",
    "labels": ["ci", "enhancement", "good first issue"],
    "body": "## Description\n\nThere is no CI check to ensure the Next.js app builds successfully. This should be validated on every PR to prevent broken deployments.\n\n**Current State**: No build validation workflow exists\n\n## Impact\n\n- Broken builds can be merged\n- Deployment failures discovered too late\n- Wasted time debugging build issues in production\n\n## Tasks\n\n- [ ] Create `.github/workflows/build.yml`\n- [ ] Configure Next.js build step\n- [ ] Check for build warnings and errors\n- [ ] Validate environment variable usage\n- [ ] Cache node_modules and Next.js build cache\n- [ ] Run build on multiple Node versions (18.x, 20.x)\n- [ ] Add build status badge to README\n\n## Acceptance Criteria\n\n- Build runs on every PR and push to main\n- Failed builds block PR merge\n- Build completes in under 5 minutes\n- Build cache works correctly to speed up runs\n- Status badge shows current build status\n\n## Technical Details\n\nCreate `.github/workflows/build.yml`:\n```yaml\nname: Build\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        node-version: [18.x, 20.x]\n    \n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Setup Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Build application\n        run: npm run build\n        env:\n          # Add dummy env vars needed for build\n          NEXT_PUBLIC_SUPABASE_URL: https://example.supabase.co\n          NEXT_PUBLIC_SUPABASE_ANON_KEY: dummy_key\n          STRIPE_SECRET_KEY: sk_test_dummy\n          JWT_SECRET: test_secret\n          JWT_REFRESH_SECRET: test_refresh_secret\n      \n      - name: Check for TypeScript errors\n        run: npx tsc --noEmit\n```\n\n**Estimated Time**: 1 hour"
  },
  {
    "title": "docs(contributing): create CONTRIBUTING.md guide",
    "labels": ["documentation", "good first issue"],
    "body": "## Description\n\nThe repository lacks a CONTRIBUTING.md file, making it difficult for new contributors to understand how to contribute effectively.\n\n**Current State**: No CONTRIBUTING.md exists\n\n## Impact\n\n- Unclear contribution process\n- Inconsistent code style and commit messages\n- Wasted time on rejected contributions\n- Lower quality pull requests\n\n## Tasks\n\n- [ ] Create `CONTRIBUTING.md` in root directory\n- [ ] Document development setup steps\n- [ ] Explain how to run the project locally\n- [ ] Document code style guidelines\n- [ ] Explain commit message conventions (Conventional Commits)\n- [ ] Document PR submission process\n- [ ] List testing requirements\n- [ ] Add code of conduct reference\n- [ ] Document issue labels and their meanings\n\n## Acceptance Criteria\n\n- CONTRIBUTING.md covers all essential contribution topics\n- Setup instructions are clear and complete\n- Conventional commit format is explained with examples\n- PR guidelines are specific and actionable\n- Document references existing CI checks\n- Links to relevant resources are included\n\n## Technical Details\n\nInclude sections:\n1. **Getting Started** - Setup, installation, environment variables\n2. **Development Workflow** - Branching, commits, PRs\n3. **Code Style** - TypeScript, formatting, linting\n4. **Testing** - How to write and run tests\n5. **Commit Messages** - Conventional commits format\n6. **Pull Requests** - What to include, how to describe changes\n7. **Issue Labels** - What each label means\n8. **Getting Help** - Where to ask questions\n\nExample commit message format:\n```\ntype(scope): description\n\nTypes: feat, fix, docs, style, refactor, perf, test, build, ci, chore, security\n\nExamples:\nfeat(auth): add OAuth2 login flow\nfix(api): handle null pointer in user service\ndocs(readme): update installation instructions\n```\n\n**Estimated Time**: 2 hours"
  },
  {
    "title": "docs(readme): improve README with setup instructions",
    "labels": ["documentation", "good first issue"],
    "body": "## Description\n\nThe current README.md focuses on the product vision but lacks essential technical information for developers.\n\n**Affected file**: `README.md`\n\n## Impact\n\n- Developers cannot easily set up the project\n- Missing information about tech stack\n- No installation or running instructions\n- No link to CONTRIBUTING.md\n\n## Tasks\n\n- [ ] Add \"Tech Stack\" section at the top\n- [ ] Add \"Prerequisites\" section (Node.js version, etc.)\n- [ ] Add \"Installation\" section with step-by-step setup\n- [ ] Add \"Environment Variables\" section\n- [ ] Add \"Running Locally\" section\n- [ ] Add \"Project Structure\" overview\n- [ ] Add \"Contributing\" section with link to CONTRIBUTING.md\n- [ ] Add CI/CD status badges\n- [ ] Add license information\n- [ ] Keep existing vision/features content\n\n## Acceptance Criteria\n\n- README has complete setup instructions\n- A new developer can set up project following README alone\n- All required environment variables are listed\n- Common issues and troubleshooting included\n- README maintains current branding and vision content\n- Status badges for build and tests are visible\n\n## Technical Details\n\nAdd sections before existing content:\n```markdown\n# BotHive: AI Agent Marketplace\n\n[![Build Status](https://github.com/USERNAME/BotHive/workflows/Build/badge.svg)](https://github.com/USERNAME/BotHive/actions)\n[![Test Status](https://github.com/USERNAME/BotHive/workflows/Test/badge.svg)](https://github.com/USERNAME/BotHive/actions)\n\n## Tech Stack\n\n- **Framework**: Next.js 14.1 (App Router)\n- **Language**: TypeScript\n- **Database**: Supabase (PostgreSQL) / MongoDB\n- **Authentication**: JWT + Supabase Auth\n- **Payments**: Stripe\n- **UI**: Radix UI + Tailwind CSS\n- **State**: Zustand\n- **Validation**: Zod\n\n## Prerequisites\n\n- Node.js 18.x or 20.x\n- npm or yarn\n- Supabase account OR MongoDB instance\n- Stripe account\n\n## Installation\n\n1. Clone the repository\n   ```bash\n   git clone https://github.com/USERNAME/BotHive.git\n   cd BotHive\n   ```\n\n2. Install dependencies\n   ```bash\n   npm install\n   ```\n\n3. Set up environment variables\n   ```bash\n   cp .env.example .env.local\n   ```\n   Edit `.env.local` with your credentials\n\n4. Run the development server\n   ```bash\n   npm run dev\n   ```\n\n5. Open [http://localhost:3000](http://localhost:3000)\n\n## Environment Variables\n\nSee `.env.example` for all required variables. Key variables:\n- `NEXT_PUBLIC_SUPABASE_URL` - Your Supabase project URL\n- `JWT_SECRET` - Secret for JWT signing (generate with `openssl rand -base64 32`)\n- `STRIPE_SECRET_KEY` - Your Stripe secret key\n\n[... keep existing content ...]\n```\n\n**Estimated Time**: 1-2 hours"
  },
  {
    "title": "feat(eslint): add stricter TypeScript ESLint rules",
    "labels": ["enhancement", "code quality", "good first issue"],
    "body": "## Description\n\nThe current ESLint configuration is minimal and doesn't enforce TypeScript best practices. Stricter rules would improve code quality.\n\n**Current State**: Only basic Next.js ESLint config\n\n## Impact\n\n- Inconsistent code style\n- TypeScript's full potential not utilized\n- Common bugs not caught by linter\n- No enforcement of best practices\n\n## Tasks\n\n- [ ] Install @typescript-eslint/eslint-plugin and @typescript-eslint/parser\n- [ ] Update .eslintrc.json with TypeScript rules\n- [ ] Add rule: no-explicit-any (error)\n- [ ] Add rule: no-unused-vars (error)\n- [ ] Add rule: explicit-function-return-type (warn)\n- [ ] Add rule: no-floating-promises (error)\n- [ ] Add Prettier integration for formatting\n- [ ] Create .prettierrc.json for consistent formatting\n- [ ] Add lint-staged for pre-commit linting\n\n## Acceptance Criteria\n\n- ESLint catches `any` types and unused variables\n- Prettier formats code consistently\n- npm run lint passes on existing code (after fixes)\n- Pre-commit hook prevents committing lint errors\n- CI runs linting on every PR\n\n## Technical Details\n\nUpdate `.eslintrc.json`:\n```json\n{\n  \"extends\": [\n    \"next/core-web-vitals\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:@typescript-eslint/recommended-requiring-type-checking\",\n    \"prettier\"\n  ],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"parserOptions\": {\n    \"project\": \"./tsconfig.json\"\n  },\n  \"rules\": {\n    \"@typescript-eslint/no-explicit-any\": \"error\",\n    \"@typescript-eslint/no-unused-vars\": [\"error\", {\n      \"argsIgnorePattern\": \"^_\"\n    }],\n    \"@typescript-eslint/explicit-function-return-type\": [\"warn\", {\n      \"allowExpressions\": true\n    }],\n    \"@typescript-eslint/no-floating-promises\": \"error\",\n    \"@typescript-eslint/no-misused-promises\": \"error\"\n  }\n}\n```\n\nCreate `.prettierrc.json`:\n```json\n{\n  \"semi\": true,\n  \"trailingComma\": \"es5\",\n  \"singleQuote\": true,\n  \"printWidth\": 80,\n  \"tabWidth\": 2\n}\n```\n\n**Estimated Time**: 2-3 hours"
  },
  {
    "title": "feat(database): add database migration system",
    "labels": ["enhancement", "database", "help wanted"],
    "body": "## Description\n\nThe project supports both Supabase and MongoDB but lacks a migration system to manage schema changes over time.\n\n**Current State**: No migration files or migration runner exists\n\n## Impact\n\n- Schema changes are manual and error-prone\n- Difficult to track database schema history\n- Hard to sync schema across environments\n- Risk of data loss during schema changes\n\n## Tasks\n\n- [ ] Choose migration tool (Prisma, Drizzle, or db-migrate)\n- [ ] Create migrations directory structure\n- [ ] Create initial migration from current schema\n- [ ] Add migration scripts to package.json\n- [ ] Document migration workflow in README\n- [ ] Create migration for Supabase tables\n- [ ] Create migration for MongoDB collections\n- [ ] Add migration check to CI/CD\n\n## Acceptance Criteria\n\n- Migration system works for both database providers\n- Migrations can be run up and down (rollback)\n- Initial migration creates all tables/collections\n- Documentation explains how to create and run migrations\n- CI checks that migrations are up to date\n\n## Technical Details\n\nIf using Prisma:\n```bash\nnpm install -D prisma\nnpm install @prisma/client\nnpx prisma init\n```\n\nCreate `prisma/schema.prisma` with current schema, then:\n```bash\nnpx prisma migrate dev --name init\n```\n\nAdd to package.json:\n```json\n{\n  \"scripts\": {\n    \"db:migrate\": \"prisma migrate deploy\",\n    \"db:migrate:dev\": \"prisma migrate dev\",\n    \"db:studio\": \"prisma studio\"\n  }\n}\n```\n\n**Estimated Time**: 4-6 hours"
  },
  {
    "title": "feat(accessibility): add ARIA labels to interactive elements",
    "labels": ["accessibility", "enhancement", "help wanted"],
    "body": "## Description\n\nInteractive UI components lack proper ARIA labels and accessibility attributes, making the application difficult to use with screen readers.\n\n**Affected files**: Components in `components/ui/` and page components\n\n## Impact\n\n- Poor accessibility for users with disabilities\n- Non-compliance with WCAG guidelines\n- SEO penalties\n- Potential legal issues\n\n## Tasks\n\n- [ ] Audit all interactive components for ARIA labels\n- [ ] Add aria-label to all buttons without visible text\n- [ ] Add aria-describedby to form inputs with errors\n- [ ] Add role attributes where appropriate\n- [ ] Ensure keyboard navigation works for all interactive elements\n- [ ] Add focus indicators that meet contrast requirements\n- [ ] Test with screen reader (NVDA or VoiceOver)\n- [ ] Add skip-to-content link\n- [ ] Ensure proper heading hierarchy (h1, h2, h3...)\n\n## Acceptance Criteria\n\n- All interactive elements have appropriate ARIA labels\n- Screen reader can navigate the entire application\n- Keyboard-only navigation is fully functional\n- Focus indicators are visible and meet WCAG AA standards\n- Automated accessibility tests pass (axe-core)\n- Lighthouse accessibility score > 90\n\n## Technical Details\n\nExamples:\n```tsx\n// Button with icon only\n<button aria-label=\"Close dialog\">\n  <X className=\"h-4 w-4\" />\n</button>\n\n// Form input with error\n<input\n  id=\"email\"\n  type=\"email\"\n  aria-describedby={error ? \"email-error\" : undefined}\n  aria-invalid={error ? \"true\" : \"false\"}\n/>\n{error && <p id=\"email-error\" role=\"alert\">{error}</p>}\n\n// Navigation landmark\n<nav aria-label=\"Main navigation\">\n  {/* navigation items */}\n</nav>\n```\n\nInstall testing tools:\n```bash\nnpm install -D @axe-core/react jest-axe\n```\n\n**Estimated Time**: 5-7 hours"
  },
  {
    "title": "feat(seo): add metadata and OpenGraph tags",
    "labels": ["enhancement", "seo", "good first issue"],
    "body": "## Description\n\nPages lack proper metadata, OpenGraph tags, and structured data for SEO and social sharing.\n\n**Current State**: Minimal or missing metadata in page components\n\n## Impact\n\n- Poor search engine rankings\n- Ugly social media previews when shared\n- Missing sitemap and robots.txt\n- No structured data for rich snippets\n\n## Tasks\n\n- [ ] Add metadata to all page.tsx files using Next.js Metadata API\n- [ ] Create OpenGraph images for each major page\n- [ ] Add Twitter Card metadata\n- [ ] Generate sitemap.xml\n- [ ] Create robots.txt with proper directives\n- [ ] Add JSON-LD structured data for organization\n- [ ] Add JSON-LD for products (AI agents)\n- [ ] Optimize page titles and descriptions\n- [ ] Add canonical URLs\n\n## Acceptance Criteria\n\n- All pages have unique, descriptive titles\n- Meta descriptions are 150-160 characters\n- OpenGraph tags display correctly in social media previews\n- Sitemap includes all public pages\n- robots.txt properly configured for crawlers\n- Google Rich Results Test passes for structured data\n- Lighthouse SEO score > 90\n\n## Technical Details\n\nAdd to `app/layout.tsx`:\n```typescript\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    default: 'BotHive - AI Agent Marketplace',\n    template: '%s | BotHive'\n  },\n  description: 'Discover, buy, and sell AI agents. Connect builders with businesses looking for automation solutions.',\n  keywords: ['AI agents', 'automation', 'marketplace', 'machine learning'],\n  authors: [{ name: 'BotHive Team' }],\n  openGraph: {\n    type: 'website',\n    locale: 'en_US',\n    url: 'https://bothive.com',\n    siteName: 'BotHive',\n    images: [{\n      url: '/og-image.png',\n      width: 1200,\n      height: 630,\n      alt: 'BotHive - AI Agent Marketplace'\n    }]\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: 'BotHive - AI Agent Marketplace',\n    description: 'Discover, buy, and sell AI agents',\n    images: ['/og-image.png']\n  },\n  robots: {\n    index: true,\n    follow: true\n  }\n}\n```\n\n**Estimated Time**: 3-4 hours"
  },
  {
    "title": "perf(database): add indexes for common queries",
    "labels": ["performance", "database", "help wanted"],
    "body": "## Description\n\nDatabase tables lack indexes on frequently queried columns, leading to slow query performance as data grows.\n\n**Affected areas**: User lookups by email, agent queries by category/tags, subscription lookups by customer ID\n\n## Impact\n\n- Slow authentication (email lookups)\n- Slow marketplace browsing (agent queries)\n- Slow subscription status checks\n- Increased database load\n- Poor user experience with large datasets\n\n## Tasks\n\n- [ ] Analyze common query patterns in codebase\n- [ ] Add index on users.email (unique)\n- [ ] Add index on users.stripe_customer_id\n- [ ] Add index on agents.category\n- [ ] Add index on agents.status\n- [ ] Add index on agents.builder_id\n- [ ] Add compound index on agents (status, category, rating)\n- [ ] Add index on subscriptions.stripe_customer_id\n- [ ] Add index on subscriptions.user_id\n- [ ] Add index on reviews.agent_id\n- [ ] Add index on projects.recruiter_id\n- [ ] Add index on messages (sender_id, receiver_id)\n- [ ] Test query performance before and after\n- [ ] Document indexing strategy\n\n## Acceptance Criteria\n\n- All frequently queried columns have indexes\n- Query performance improves by at least 50%\n- No duplicate indexes\n- Indexes work for both Supabase and MongoDB\n- Migration includes index creation\n\n## Technical Details\n\nFor Supabase (SQL):\n```sql\n-- Users\nCREATE UNIQUE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_users_stripe_customer_id ON users(stripe_customer_id);\n\n-- Agents\nCREATE INDEX idx_agents_category ON agents(category);\nCREATE INDEX idx_agents_status ON agents(status);\nCREATE INDEX idx_agents_builder_id ON agents(builder_id);\nCREATE INDEX idx_agents_search ON agents(status, category, rating DESC);\n\n-- Subscriptions\nCREATE INDEX idx_subscriptions_user_id ON subscriptions(user_id);\nCREATE INDEX idx_subscriptions_stripe_customer_id ON subscriptions(stripe_customer_id);\n```\n\nFor MongoDB:\n```typescript\n// In schema definitions\nuserSchema.index({ email: 1 }, { unique: true });\nuserSchema.index({ stripe_customer_id: 1 });\n\nagentSchema.index({ category: 1, status: 1, rating: -1 });\nagentSchema.index({ builder_id: 1 });\n\nsubscriptionSchema.index({ user_id: 1 });\nsubscriptionSchema.index({ stripe_customer_id: 1 });\n```\n\n**Estimated Time**: 2-3 hours"
  },
  {
    "title": "refactor(database): consolidate database abstraction layer",
    "labels": ["refactor", "database", "help wanted"],
    "body": "## Description\n\nThe codebase has duplicate database logic for Supabase and MongoDB. A unified database abstraction layer would simplify maintenance and prevent bugs.\n\n**Affected files**: `lib/database/client.ts`, `lib/database/mongodb.ts`, `lib/database/supabase.ts`\n\n## Impact\n\n- Code duplication\n- Inconsistent error handling between providers\n- Difficult to switch database providers\n- Hard to add new database operations\n\n## Tasks\n\n- [ ] Design unified database interface\n- [ ] Implement adapter pattern for each provider\n- [ ] Create consistent error types\n- [ ] Unify return types (DatabaseResult<T>)\n- [ ] Consolidate auth operations\n- [ ] Consolidate CRUD operations\n- [ ] Add database operation types\n- [ ] Update all database calls to use new interface\n- [ ] Add comprehensive tests for both adapters\n- [ ] Document database abstraction layer\n\n## Acceptance Criteria\n\n- Single interface for all database operations\n- Easy to add new database providers\n- Consistent error handling across providers\n- All database operations return DatabaseResult<T>\n- Tests verify both providers work identically\n- Migration guide for updating existing code\n\n## Technical Details\n\nCreate `lib/database/adapter.ts`:\n```typescript\nexport interface DatabaseAdapter {\n  // Auth operations\n  auth: {\n    signUp(email: string, password: string, userData: any): Promise<DatabaseResult<User>>;\n    signIn(email: string, password: string): Promise<DatabaseResult<Session>>;\n    signOut(): Promise<DatabaseResult<void>>;\n    getSession(): Promise<DatabaseResult<Session>>;\n    getUserById(id: string): Promise<DatabaseResult<User>>;\n  };\n  \n  // Agent operations\n  agents: {\n    create(data: CreateAgentInput): Promise<DatabaseResult<Agent>>;\n    getById(id: string): Promise<DatabaseResult<Agent>>;\n    list(filters: AgentFilters): Promise<DatabaseResult<Agent[]>>;\n    update(id: string, data: UpdateAgentInput): Promise<DatabaseResult<Agent>>;\n    delete(id: string): Promise<DatabaseResult<void>>;\n  };\n  \n  // ... other operations\n}\n\nexport class SupabaseAdapter implements DatabaseAdapter {\n  // Implementation\n}\n\nexport class MongoDBAdapter implements DatabaseAdapter {\n  // Implementation\n}\n```\n\n**Estimated Time**: 8-10 hours"
  },
  {
    "title": "docs(api): create API documentation with examples",
    "labels": ["documentation", "enhancement", "help wanted"],
    "body": "## Description\n\nAPI endpoints are not documented, making it difficult for frontend developers and potential API consumers to use them.\n\n**Current State**: No API documentation exists\n\n## Impact\n\n- Frontend developers need to read source code to understand APIs\n- Difficult to build integrations\n- No examples of request/response formats\n- Unclear authentication requirements\n\n## Tasks\n\n- [ ] Choose documentation format (OpenAPI/Swagger or manual)\n- [ ] Document all authentication endpoints\n- [ ] Document all agent endpoints\n- [ ] Document all subscription endpoints\n- [ ] Document all webhook endpoints\n- [ ] Include request/response examples\n- [ ] Document authentication methods\n- [ ] Document error codes and responses\n- [ ] Add rate limit information\n- [ ] Create API documentation page or Swagger UI\n\n## Acceptance Criteria\n\n- All API endpoints are documented\n- Each endpoint has request/response examples\n- Authentication requirements are clear\n- Error responses are documented\n- API docs are accessible at /api/docs or in markdown\n- Examples can be copy-pasted and work\n\n## Technical Details\n\nCreate `docs/API.md` or use Swagger:\n```markdown\n# BotHive API Documentation\n\n## Authentication\n\nAll authenticated endpoints require Bearer token:\n```\nAuthorization: Bearer YOUR_JWT_TOKEN\n```\n\n### POST /api/auth/signup\n\nCreate a new user account.\n\n**Request Body:**\n```json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"SecurePass123!\",\n  \"full_name\": \"John Doe\",\n  \"role\": \"builder\"\n}\n```\n\n**Response (201):**\n```json\n{\n  \"user\": {\n    \"id\": \"123\",\n    \"email\": \"user@example.com\",\n    \"full_name\": \"John Doe\",\n    \"role\": \"builder\"\n  },\n  \"token\": \"eyJhbGc...\"\n}\n```\n\n**Errors:**\n- 400: Invalid input (validation errors)\n- 409: Email already exists\n```\n\nOr use Swagger/OpenAPI with swagger-jsdoc:\n```typescript\n/**\n * @swagger\n * /api/auth/signup:\n *   post:\n *     summary: Create a new user account\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - email\n *               - password\n *               - full_name\n *               - role\n */\n```\n\n**Estimated Time**: 4-5 hours"
  },
  {
    "title": "feat(monitoring): add error tracking with Sentry",
    "labels": ["enhancement", "monitoring", "help wanted"],
    "body": "## Description\n\nThe application has no error tracking or monitoring solution, making it difficult to identify and debug production issues.\n\n**Current State**: Errors are only logged to console\n\n## Impact\n\n- No visibility into production errors\n- Unable to track error frequency and patterns\n- Missing context for debugging (user, request, environment)\n- Users report bugs that cannot be reproduced\n\n## Tasks\n\n- [ ] Create Sentry account and project\n- [ ] Install @sentry/nextjs\n- [ ] Configure Sentry in next.config.js\n- [ ] Create sentry.client.config.ts\n- [ ] Create sentry.server.config.ts\n- [ ] Add SENTRY_DSN to environment variables\n- [ ] Capture errors in API routes\n- [ ] Capture client-side errors\n- [ ] Add user context to error reports\n- [ ] Set up error alerts for critical issues\n- [ ] Configure source maps upload\n- [ ] Test error reporting in development\n\n## Acceptance Criteria\n\n- All unhandled errors are sent to Sentry\n- Error reports include user context\n- Source maps work for readable stack traces\n- Alerts configured for high-severity errors\n- Performance monitoring enabled (optional)\n- Sentry captures both client and server errors\n\n## Technical Details\n\nInstall:\n```bash\nnpx @sentry/wizard@latest -i nextjs\n```\n\nOr manual setup:\n```bash\nnpm install @sentry/nextjs\n```\n\nCreate `sentry.client.config.ts`:\n```typescript\nimport * as Sentry from '@sentry/nextjs';\n\nSentry.init({\n  dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n  environment: process.env.NODE_ENV,\n  tracesSampleRate: 0.1,\n  beforeSend(event, hint) {\n    // Filter out specific errors\n    return event;\n  },\n});\n```\n\nUpdate `next.config.js`:\n```javascript\nconst { withSentryConfig } = require('@sentry/nextjs');\n\nmodule.exports = withSentryConfig(\n  nextConfig,\n  {\n    silent: true,\n    org: 'your-org',\n    project: 'bothive',\n  },\n  {\n    hideSourceMaps: true,\n    transpileClientSDK: true,\n  }\n);\n```\n\n**Estimated Time**: 2-3 hours"
  }
]
